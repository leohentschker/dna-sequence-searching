import zlib
import abc
import sys


def generate_crc_initializers(num_initializers):
    """
    Generates a list of crc checksums to be
    used as initializers. This is an easy
    alternative to creating a family of
    hash functions
    """
    crc_value = "Lowell"

    initializer = zlib.adler32(crc_value)

    initializers = []
    for _ in xrange(num_initializers):
        initializers.append(initializer)
        initializer = zlib.adler32(crc_value, initializer)

    return initializers


class MinhashHandler(object):

    initializer = "Lowell"

    minhash_initializers = generate_crc_initializers(50)

    @classmethod
    def chunk_text(cls, text):
        raise NotImplementedError("Subclasses must define how to chunk the text!")

    @classmethod
    def generate_minhash_array(cls, text):
        """
        Returns a list of numbers, generated by
        applying the different hash functions to
        chunks of the text
        """

        text_chunks = cls.chunk_text(text)

        minhash_result = [sys.maxint for _ in xrange(len(cls.minhash_initializers))]

        for text_chunk in text_chunks:
            for initializer_index, minhash_initializer in enumerate(cls.minhash_initializers):
                minhash_value = zlib.adler32(text_chunk, minhash_initializer)

                if minhash_value < minhash_result[initializer_index]:
                    minhash_result[initializer_index] = minhash_value

        return minhash_result


class DNAMinhashHandler(MinhashHandler):
    
    DNA_CHUNK_SIZE = 10
    
    @classmethod
    def chunk_text(cls, text):
        """
        Breaks up the text into chunks of size 10.
        Then, it runs the minhash algorithm on it
        """
        return [text[chunk_ind: chunk_ind + cls.DNA_CHUNK_SIZE]
                for chunk_ind in xrange(len(text) - cls.DNA_CHUNK_SIZE + 1)]
